# i.Create array using List and Tuple. Find type of array and version of NumPy.
import numpy as np
a = np.array([1, 2, 3, 4, 5])
b=np.array((10, 20, 30, 40, 50))
print("Array of list is:", a)
print("Array of tuple is :", b)
print("Version of NumPy is:", np.__version__)
print("Type of a is:", type(a))
'''tell us the type of the object passed to it i.e. a is numpy.ndarray type'''


#Dimensions in Arrays
import numpy as np
a=np.array(10)
print("0-D Array:", a)
b=np.array([10, 20, 30, 40])
print("1-D Array:", b)
c=np.array([[10, 20, 30], [40, 50, 60]])
print("2-D Array:", c)
d=np.array([[[10, 20, 100], [30,40, 200]], [[50, 60, 300], [70,80, 400]]])
print("3-D Array:", d)


#Number of Dimensions
print("Check Dimensions of arrays a, b, c, d using ndim attribute")
import numpy as np
a=np.array(10)
b=np.array([10, 20, 30, 40])
c=np.array([[10, 20, 30], [40, 50, 60]])
d=np.array([[[10, 20, 100], [30,40, 200]], [[50, 60, 300], [70,80, 400]]])
print("Dimensions of Arrays")
print("Dimension of Array a:",a.ndim)
print("Dimension of Array a:",b.ndim)
print("Dimension of Array a:",c.ndim)
print("Dimension of Array a:",d.ndim)


#NumPy Array Indexing
print("Accessing Array elements using indexes")
import numpy as np
a_array=np.array([10, 20, 30, 40])
print("1st Element", a_array[0])
print("2nd Element",a_array[1])
print("3rd Element",a_array[2])
print("4th Element",a_array[3])
print("Add 1st and 2nd Element from the array")
print(a_array[0]+a_array[1])


# iii. Create 2-dimensional array (Matrix) and access row and column elements of matrix using indexing.
print("Accessing 2-D and 3-D array elements")
print("The dimension represents the row and the index represents the column a[dimension,index].")
import numpy as np
a=np.array([[10, 20, 30],[40,50,60]])
b=np.array([[[10, 20, 30],[40,50,60]], [[70, 80, 90], [100,110,120]]])
print("a is 2-D array:", a)
print("3rd element of First row ",a[0,2])
print("b is 3-D array:", b)
print("2nd element of first row:", b[0,0,2])
print("Negative Indexing")
print("Last element of 1st Dim:", a[0,-1])


# ii. Create array of zeros and ones.
import numpy as np
print("Array of Zeros")
zeors_array = np.zeros((2, 3))
print(zeors_array)
print("Array of ones")
ones_array = np.ones( (1, 3, 3), dtype = np.int32 ) #specifying dtype
print(ones_array)


# v. Write a Python program to perform Addition, Multiplication and to find Transpose of Matrices using NumPy.
import numpy as np
a=np.array([[1, 2, 3], [4, 5, 6]])
b=np.array([[1, 2, 3], [4, 5, 6]])
print("Addition of two Matrices")
c=a+b
print(c)
print("Multiplication of two Matrices:")
d= np.array([[1, 2, 3], [4, 5, 6]])
e=np.array([[1, 2], [3, 4], [5, 6]])
f=d.dot(e)
print(d)
print("Transpose of a Matrix")
g=np.array([[1, 2], [3, 4], [5, 6]])
print(g.transpose())



theory:
What is NumPy?
NumPy is a Python library used for working with arrays.

It also has functions for working in domain of linear algebra, fourier transform, and matrices.

NumPy was created in 2005 by Travis Oliphant. It is an open source project and you can use it freely.

NumPy stands for Numerical Python.

Why Use NumPy?
In Python we have lists that serve the purpose of arrays, but they are slow to process.

NumPy aims to provide an array object that is up to 50x faster than traditional Python lists.

The array object in NumPy is called ndarray, it provides a lot of supporting functions that make working with ndarray very easy.

Arrays are very frequently used in data science, where speed and resources are very important.

Data Science: is a branch of computer science where we study how to store, use and analyze data for deriving information from it.

Why is NumPy Faster Than Lists?
NumPy arrays are stored at one continuous place in memory unlike lists, so processes can access and manipulate them very efficiently.

This behavior is called locality of reference in computer science.

This is the main reason why NumPy is faster than lists. Also it is optimized to work with latest CPU architectures.

Which Language is NumPy written in?
NumPy is a Python library and is written partially in Python, but most of the parts that require fast computation are written in C or C++.

Where is the NumPy Codebase?
The source code for NumPy is located at this github repository https://github.com/numpy/numpy

github: enables many people to work on the same codebase.